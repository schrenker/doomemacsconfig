* TOC                                                                   :TOC:
- [[#headers][Headers]]
- [[#base-settings][Base settings]]
- [[#package-manager][Package Manager]]
- [[#early-init-options][Early Init options]]

* Headers
#+begin_src emacs-lisp :tangle early-init.elno
;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-

;;; Commentary:
;; Early init file. Here I disable built-in package manager in favor of elpaca, and set additional paths for native-comp dependencies.

;;; Code:
#+end_src

#+begin_src emacs-lisp :tangle init.elno
;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-

;;; Commentary:
;; This is my personal configuration file I use at three different environment systems - on macOS, WSL2 (wslg) and msys2.

;;; Code:
#+end_src

* Base settings
#+begin_src emacs-lisp :tangle init.elno
(setq gc-cons-threshold (* 1024 1024 200)
      gc-cons-percentage 0.6)

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(setq-default indent-tabs-mode nil
              truncate-string-ellipsis "â€¦"
              x-stretch-cursor t
              window-combination-resize t
              delete-by-moving-to-trash t
              tab-width 4)

(setq custom-file "/dev/null"
      backup-directory-alist `(("." . ,(concat user-emacs-directory "backup/")))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      create-lockfiles nil
      inhibit-startup-screen t
      inhibit-startup-message t
      initial-scratch-message nil
      initial-major-mode 'org-mode
      max-lisp-eval-depth 10000
      load-prefer-newer t
      visible-bell (eq system-type 'gnu/linux)
      display-line-numbers-type 'visual
      visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow)
      scroll-margin 10
      scroll-conservatively 1000
      scroll-step 1
      scroll-preserve-screen-position t
      delete-pair-blink-delay 0
      sentence-end-double-space nil
      auto-window-vscroll nil
      savehist-additional-variables '(kill-ring search-ring regexp-search-ring)
      native-comp-async-report-warnings-errors nil
      require-final-newline t
      mac-command-modifier 'meta
      mac-option-modifier 'alt
      mac-right-option-modifier nil
      electric-pair-open-newline-between-pairs t
      user-full-name "Sebastian Zawadzki"
      user-mail-address (rot13 "fronfgvna@mnjnqmxv.grpu")
      frame-resize-pixelwise t
      initial-frame-alist (if (eq system-type 'gnu/linux)
                              '((top . 1) (left . 1) (width . 120) (height . 40))
                            '((fullscreen . maximized))))

(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))

(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)

(savehist-mode 1)
(winner-mode 1)
(pixel-scroll-mode 1)
(global-display-line-numbers-mode 1)
(electric-pair-mode 1)
(electric-indent-mode 1)
(global-prettify-symbols-mode 1)
(column-number-mode 1)
(global-hl-line-mode 1)

(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; Thanks to Xenodium https://xenodium.com/deleting-from-emacs-sequence-vars
(defun schrenker/remove-from-list-variable ()
  (interactive)
  (let* ((var (intern
               (completing-read "From variable: "
                                (let (symbols)
                                  (mapatoms
                                   (lambda (sym)
                                     (when (and (boundp sym)
                                                (seqp (symbol-value sym)))
                                       (push sym symbols))))
                                  symbols) nil t)))
         (values (mapcar (lambda (item)
                           (setq item (prin1-to-string item))
                           (concat (truncate-string-to-width
                                    (nth 0 (split-string item "\n"))
                                    (window-body-width))
                                   (propertize item 'invisible t)))
                         (symbol-value var)))
         (index (progn
                  (when (seq-empty-p values) (error "Already empty"))
                  (seq-position values (completing-read "Delete: " values nil t)))))
    (unless index (error "Eeek. Something's up."))
    (set var (append (seq-take (symbol-value var) index)
                     (seq-drop (symbol-value var) (1+ index))))
    (message "Deleted: %s" (truncate-string-to-width
                            (seq-elt values index)
                            (- (window-body-width) 9)))))
#+end_src

* Package Manager
Disable builtin package manager, and enable ahead of time package management for Elpaca.
#+begin_src emacs-lisp :tangle early-init.elno
(setq package-enable-at-startup nil
      elpaca-aot-native-compilation t)
#+end_src

* Early Init options
#+begin_src emacs-lisp :tangle early-init.elno
;; Fix for ld: library not found for -lemutls_w libgccjit.so: error: error invoking gcc driver
(when (eq system-type 'darwin)
  (customize-set-variable 'native-comp-driver-options '("-Wl,-w"))
  (setq native-comp-async-jobs-number 8)
  (setenv "LIBRARY_PATH" "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"))

(provide 'early-init)
;;; early-init.el ends here.
#+end_src
