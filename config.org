#+TITLE: Literate doom emacs config

* Table of Contents :TOC:
- [[#headers][Headers]]
- [[#doom][Doom]]
- [[#emacs][Emacs]]
  - [[#personal-information][Personal information]]
  - [[#keybinds][Keybinds]]
  - [[#ui][UI]]
  - [[#emacsclient][Emacsclient]]
  - [[#editor][Editor]]
- [[#evil][Evil]]
  - [[#set-up-evil-packages][Set up evil packages]]
  - [[#split-windows-so-that-rightdown-is-focused-after-the-split][Split windows so that right/down is focused after the split]]
  - [[#line-up-y-behavior-to-other-operators][Line up Y behavior to other operators]]
  - [[#dont-continue-comments-on-oo-creating-empty-lines][Don't continue comments on o/O, creating empty lines]]
  - [[#changed-text-doesnt-go-into-clipboard][Changed text doesn't go into clipboard]]
  - [[#evil-keybinds][Evil keybinds]]
- [[#org-mode][Org mode]]
  - [[#org-mode-keybinds][Org mode keybinds]]
  - [[#set-up-path-for-org-mode][Set up path for org mode]]
  - [[#exclude-certain-tags-from-inheritance][Exclude certain tags from inheritance]]
  - [[#set-up-headline-encryption][Set up headline encryption]]
  - [[#disable-electric-indent][Disable electric indent]]
  - [[#org-kanban][Org kanban]]
  - [[#org-appear][Org appear]]
  - [[#inline-images][Inline images]]
  - [[#log-time-of-done-tasks][Log time of done tasks]]
  - [[#task-status-and-prioritization][Task status and prioritization]]
  - [[#disable-company-for-org-mode][Disable company for org-mode]]
  - [[#roam][Roam]]
  - [[#record-last-modified-date-in-org-mode][Record last modified date in org-mode]]
  - [[#org-capture-templates][Org capture templates]]
  - [[#org-capture-anywhere-macos][Org capture anywhere MacOS]]
  - [[#org-mode-appearance][Org mode appearance]]
  - [[#org-autolist][Org autolist]]
- [[#treemacs][Treemacs]]
  - [[#treemacs-git-mode][Treemacs git mode]]
  - [[#treemacs-modes][Treemacs modes]]
  - [[#pull-all-the-icons-for-treemacs][Pull all the icons for treemacs]]
  - [[#set-treemacs-themes][Set treemacs themes]]
- [[#company][Company]]
  - [[#disable-autocommit-of-completion][Disable autocommit of completion]]
  - [[#tooltips][Tooltips]]
  - [[#matching][Matching]]
  - [[#delay][Delay]]
- [[#vterm][Vterm]]
- [[#lsp][LSP]]
- [[#additional-tools][Additional tools]]
  - [[#flyspell][Flyspell]]
  - [[#flymake][Flymake]]
  - [[#cheatsh][Cheat.sh]]
  - [[#inheritenv][Inheritenv]]

* Headers
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

* Doom
#+begin_src emacs-lisp :tangle init.el
(doom! :completion
       (company +tng)       ; the ultimate code completion backend
       ;; (helm +fuzzy +icons) ; the *other* search engine for love and life
       (vertico +icons)

       :ui
       doom                     ; what makes DOOM look the way it does
       doom-dashboard           ; a nifty splash screen for Emacs
       doom-quit                ; DOOM quit-message prompts when you quit Emacs
       indent-guides            ; highlighted indent columns
       modeline                 ; snazzy, Atom-inspired modeline, plus API
       ophints                  ; highlight the region an operation acts on
       (popup +defaults +all)   ; tame sudden yet inevitable temporary windows
       treemacs                 ; a project drawer, like neotree but cooler
       unicode                  ; extended unicode support for various languages
       vc-gutter                ; vcs diff in the fringe
       vi-tilde-fringe          ; fringe tildes to mark beyond EOB
       (window-select +numbers) ; visually switch windows
       workspaces               ; tab emulation, persistence & separate workspaces
       tabs

       :editor
       (evil +everywhere) ; come to the dark side, we have cookies
       file-templates     ; auto-snippets for empty files
       fold               ; (nigh) universal code folding
       (format +onsave)   ; automated prettiness
       snippets           ; my elves. They type so I don't have to
       word-wrap

       :emacs
       ( dired +dirvish +icons)    ; making dired pretty [functional] directory editor
       electric           ; smarter, keyword-based electric-indent
       ( ibuffer +icons ) ; interactive buffer management
       ( undo +tree )     ; persistent, smarter undo for your inevitable mistakes
       vc                 ; version-control and Emacs, sitting in a tree

       :term
       vterm ; the best terminal emulation in Emacs

       :checkers
       syntax ; tasing you for every semicolon you forget
       (spell +flyspell)

       :tools
       ansible
       (debugger +lsp)
       direnv
       (docker +lsp)
       editorconfig    ; let someone else argue about tabs vs spaces
       (eval +overlay) ; run code, run (also, repls)
       lookup          ; navigate your code and its documentation
       (lsp +peek)             ; M-x vscode
       magit           ; a git porcelain for Emacs
       make            ; run make tasks from Emacs
       pdf             ; pdf enhancements
       rgb             ; creating color strings
       terraform       ; infrastructure as code
       upload          ; map local to remote projects via ssh/ftp
       tree-sitter

       :os
       (:if IS-MAC macos) ; improve compatibility with macOS
       ( tty +osc)        ; improve the terminal Emacs experience

       :lang
       (go +lsp)
       (python +lsp +pyright +pyenv)                    ; beautiful is better than ugly
       (org +pretty +pomodoro +dragndrop +roam2) ; organize your plain life in plain text
       (sh +lsp +fish +powershell)               ; she sells {ba,z,fi}sh shells on the C xor
       json                                      ; At least it ain't XML
       yaml                                      ; JSON, but readable
       emacs-lisp                                ; drown in parentheses
       rest
       (nix +lsp)

       :app
       calendar

       :config
       literate
       (default +bindings +smartparens))
#+end_src

* Emacs
** Personal information
#+begin_src emacs-lisp :tangle config.el
(setq  user-full-name "Sebastian Zawadzki"
       user-mail-address (rot13 "fronfgvna@mnjnqmxv.grpu"))
#+end_src

** Keybinds
*** Mac specific keybindings
#+begin_src emacs-lisp :tangle config.el
(cond (IS-MAC
       (setq mac-command-modifier       'meta
             mac-option-modifier        'alt)))
#+end_src

*** Mac style keyboard shortcuts
#+begin_src emacs-lisp :tangle config.el
(map! "M-c" 'kill-ring-save)
(map! "M-v" 'yank)
(map! "M-q" 'save-buffers-kill-terminal)
(map! "M-m" 'suspend-frame)
#+end_src

*** Remove word backwards
#+begin_src emacs-lisp :tangle config.el
(map! "A-<backspace>" 'doom/delete-backward-word)
#+end_src

** UI
*** Disable menu and tool bar
#+begin_src emacs-lisp :tangle config.el
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

*** Show current function in modeline
#+begin_src emacs-lisp :tangle config.el
(which-function-mode)
#+end_src

*** Tabs
**** Group tabs by projectile project
#+begin_src emacs-lisp :tangle config.el
(require 'centaur-tabs)
(centaur-tabs-group-by-projectile-project)
#+end_src

**** Show tab index and count
#+begin_src emacs-lisp :tangle config.el
(setq centaur-tabs-show-count t)
#+end_src

**** Disable tabs for specific buffers
#+begin_src emacs-lisp :tangle config.el
(add-hook 'ibuffer-mode-hook 'centaur-tabs-local-mode)
(add-hook 'org-agenda-mode-hook 'centaur-tabs-local-mode)
#+end_src

*** Default fallback theme
#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'doom-solarized-light)
#+end_src

*** Day/Night mode switching function (based on emacs-plus patch)
#+begin_src emacs-lisp :tangle config.el
(defun my/apply-theme (appearance)
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (setq doom-theme 'doom-solarized-light)
             (load-theme 'doom-solarized-light t))
    ('dark (setq doom-theme 'doom-solarized-dark)
             (load-theme 'doom-solarized-dark t)))
  (org-roam-ui-sync-theme))

(add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src

*** Set font
#+begin_src emacs-lisp :tangle config.el
(setq  doom-font (font-spec :family "JetBrains Mono NL" :size 13))
#+end_src

*** Start emacs maximized
#+begin_src emacs-lisp :tangle config.el
(setq initial-frame-alist '((fullscreen . maximized)))
#+end_src

*** Truncate doom dashboard
#+begin_src emacs-lisp :tangle config.el
(setq +doom-dashboard-menu-sections (cl-subseq +doom-dashboard-menu-sections 0 1))
#+end_src

*** Set frame title and icon
#+begin_src emacs-lisp :tangle config.el
(setq-default
 frame-title-format '("Doom")
 ns-use-proxy-icon nil)
#+end_src

*** Make window indicator more visible
#+begin_src emacs-lisp :tangle config.el
(custom-set-faces!
  '(aw-leading-char-face
    :foreground "red"
    :weight bold :height 1.5 ))
#+end_src

*** Modeline
#+begin_src emacs-lisp :tangle config.el
(setq doom-modeline-icon (display-graphic-p)
      doom-modeline-major-mode-icon nil
      doom-modeline-buffer-state-icon t)
#+end_src

*** Always make windows proportional after splitting
#+begin_src emacs-lisp :tangle config.el
(setq-default window-combination-resize t)
#+end_src

*** Truncate ellipsis
#+begin_src emacs-lisp :tangle config.el
(setq-default truncate-string-ellipsis "…")
#+end_src

*** Uniquify
#+begin_src emacs-lisp :tangle config.el
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
(setq uniquify-separator "/")
(setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
(setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers;       uniquify-ignore-buffers-re "^\\*")
(setq-hook! 'persp-mode-hook uniquify-buffer-name-style 'forward)
#+end_src

** Emacsclient
#+begin_src emacs-lisp :tangle config.el
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

** Editor
*** Enable autosave
#+begin_src emacs-lisp :tangle config.el
(setq auto-save-default t)
#+end_src

*** Auto backup files
#+begin_src emacs-lisp :tangle config.el
(setq make-backup-files t)
#+end_src

*** Set default tab-width
#+begin_src emacs-lisp :tangle config.el
(setq-default tab-width 4)
#+end_src

*** Relative numbers
#+begin_src emacs-lisp :tangle config.el
(setq  display-line-numbers-type 'visual)
#+end_src

*** Set scroll margin
#+begin_src emacs-lisp :tangle config.el
(setq scroll-margin 5)
#+end_src

*** Disable final newline in files
#+begin_src emacs-lisp :tangle config.el
(setq require-final-newline nil)
#+end_src

* Evil
** Set up evil packages
#+begin_src emacs-lisp :tangle packages.el
(package! evil-commentary)
(package! evil-snipe :disable t)
#+end_src

** Split windows so that right/down is focused after the split
#+begin_src emacs-lisp :tangle config.el
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

** Line up Y behavior to other operators
#+begin_src emacs-lisp :tangle config.el
(setq evil-want-Y-yank-to-eol t)
#+end_src

** Don't continue comments on o/O, creating empty lines
#+begin_src emacs-lisp :tangle config.el
(setq +evil-want-o/O-to-continue-comments nil)
#+end_src

** Changed text doesn't go into clipboard
#+begin_src emacs-lisp :tangle config.el
(defun schrenker/evil-change (orig-fn beg end &optional type _ &rest args)
    (apply orig-fn beg end type ?_ args))
(advice-add 'evil-change :around 'schrenker/evil-change)
#+end_src

** Evil keybinds
*** Disable escape on "jk"
#+begin_src emacs-lisp :tangle config.el
(setq evil-escape-key-sequence nil)
#+end_src

*** Evil Window Map
#+begin_src emacs-lisp :tangle config.el
(map! :map evil-window-map
      :g "w" 'ace-window
      :g "p" 'treemacs-select-window)
#+end_src

*** Enable key-chord and make double tap ';' move cursor to the right in insert mode
#+begin_src emacs-lisp :tangle packages.el
(package! key-chord)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'key-chord)

(key-chord-define evil-insert-state-map ";;" 'right-char)
(key-chord-mode 1)
#+end_src

*** Disable evil keybindings for git-timemachine
#+begin_src emacs-lisp :tangle config.el
(with-eval-after-load 'git-timemachine
  (evil-make-overriding-map git-timemachine-mode-map 'normal)
  (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))
#+end_src

* Org mode
#+begin_src emacs-lisp :tangle config.el
(setq org-startup-folded 'nofold)
#+end_src

** Org mode keybinds

*** Org-mode-map
#+begin_src emacs-lisp :tangle config.el
(map! :map org-mode-map
      :localleader "$" 'org-decrypt-entry
      :localleader "a i" 'org-display-inline-images)
#+end_src


*** Set visual line movement via gj and gk
#+begin_src emacs-lisp :tangle config.el
(after! org
  (map! :map org-mode-map
        :nv "gj" #'evil-next-visual-line
        :nv "gk" #'evil-previous-visual-line))
#+end_src

** Set up path for org mode
#+begin_src emacs-lisp :tangle config.el
(setq org-directory "/Users/sebastian/Library/Mobile Documents/com~apple~CloudDocs/brain"
      org-roam-directory org-directory
      org-default-notes-file (concat org-directory "/!capture.org")
      +org-capture-notes-file org-default-notes-file)
#+end_src

** Exclude certain tags from inheritance
#+begin_src emacs-lisp :tangle config.el
(setq org-tags-exclude-from-inheritance '("crypt"
                                          "moc"
                                          "inbox"
                                          "wip"))
#+end_src


** Set up headline encryption
#+begin_src emacs-lisp :tangle config.el
(require 'org-crypt)

(setq org-crypt-disable-auto-save t
      org-crypt-key (rot13 "fronfgvna@mnjnqmxv.grpu"))
#+end_src

** Disable electric indent
#+begin_src emacs-lisp :tangle config.el
(add-hook! org-mode (electric-indent-local-mode -1))
#+end_src

** Org kanban
#+begin_src emacs-lisp :tangle packages.el
(package! org-kanban)
#+end_src

** Org appear
#+begin_src emacs-lisp :tangle packages.el
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(add-hook 'org-mode-hook 'org-appear-mode)
#+end_src

** Inline images
#+begin_src emacs-lisp :tangle config.el
(setq org-display-remote-inline-images t
      org-startup-with-inline-images t
      org-image-actual-width nil)
#+end_src

** Log time of done tasks
#+begin_src emacs-lisp :tangle config.el
(setq org-log-done 'time)
#+end_src


** Task status and prioritization
#+begin_src emacs-lisp :tangle config.el
(after! org
  (setq
   org-crypt-disable-auto-save t
   org-priority-highest '?A
   org-priority-lowest  '?C
   org-priority-default '?C
   org-priority-start-cycle-with-default t
   org-priority-faces '((?A :foreground "#FF6C6B" :weight normal)
                        (?B :foreground "#ECBE7B" :weight normal)
                        (?C :foreground "#51AFEF" :weight normal))
   org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "WAITING(w)"  "|" "DONE(d)" "CANCELLED(c)"))
   org-todo-keyword-faces
   '(("TODO" :foreground "#8741bb" :weight bold :underline t)
     ("INPROGRESS" :foreground "#98BE65" :weight bold :underline t)
     ("WAITING" :foreground "#DA8548" :weight bold :underline t)
     ("DONE" :foreground "#9FA4BB" :weight bold :underline t )
     ("CANCELLED" :foreground "#574C58" :weight bold :underline t))))

#+end_src

** Disable company for org-mode
#+begin_src emacs-lisp :tangle config.el
(setq company-global-modes '(not org-mode))
(add-hook 'org-mode-hook (lambda () ( company-mode -1)))
#+end_src

** Roam

*** Org roam keybinds
#+begin_src emacs-lisp :tangle config.el
(map! :map doom-leader-notes-map
      :g "r t" 'org-roam-ui-sync-theme
      :g "r o" 'org-roam-ui-open)
#+end_src

*** Org-roam-ui
#+begin_src emacs-lisp :tangle packages.el
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

*** Default template
#+begin_src emacs-lisp :tangle config.el
(setq org-roam-capture-templates '(("d" "default" plain "%?"
                                      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+startup: showeverything\n#+date: %U\n#+modified: \n#+filetags: :inbox:\n\n")
                                      :immediate-finish t)))
#+end_src

** Record last modified date in org-mode
#+begin_src emacs-lisp :tangle config.el
(after! org
  (setq time-stamp-active t
    time-stamp-start "#\\+modified: [ \t]*"
    time-stamp-end "$"
    time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
(add-hook 'before-save-hook 'time-stamp))
#+end_src

** Org capture templates
#+begin_src emacs-lisp :tangle config.el
(after! org
  (setq org-capture-templates
        '(
          ("n" "Note" entry (file+headline org-default-notes-file "Notes")
           "** %U\n%i%?" :empty-lines 1)
          ("t" "Task" entry (file+headline org-default-notes-file "Tasks")
           "** TODO %?" :empty-lines 1)
          )))
#+end_src

** Org capture anywhere MacOS
#+begin_src emacs-lisp :tangle packages.el
(package! noflet)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'noflet)
(defun schrenker/make-capture-frame ()
  "Create a new frame and run `org-capture'."
  (interactive)
  (make-frame '((name . "capture")
                (top . 300)
                (left . 700)
                (width . 80)
                (height . 25)))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
          (org-capture)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame."
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defadvice org-capture-destroy
    (after delete-capture-frame activate)
  "Advise capture-destroy to close the frame."
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))
#+end_src

** Org mode appearance

*** Headlines
#+begin_src emacs-lisp :tangle config.el
(setq org-superstar-headline-bullets-list '("⁖"))

(after! org
  (custom-set-faces!
    '(org-level-1 :height 1.04 :inherit outline-1)
    '(org-level-2 :height 1.04 :inherit outline-2)
    '(org-level-3 :height 1.04 :inherit outline-3)
    '(org-level-4 :height 1.04 :inherit outline-4)
    '(org-level-5 :height 1.04 :inherit outline-5)
    '(org-level-6 :height 1.04 :inherit outline-6)
    '(org-level-7 :height 1.04 :inherit outline-7)
    '(org-level-8 :height 1.04 :inherit outline-8)))
#+end_src

*** Bullet points
#+begin_src emacs-lisp :tangle config.el
(setq org-superstar-prettify-item-bullets nil)

(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◆"))))))
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([+]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◇"))))))
#+end_src

*** Checkboxes
#+begin_src emacs-lisp :tangle config.el
(add-hook 'org-mode-hook (lambda ()
  (push '("[#A]" . "⁂" ) prettify-symbols-alist)
  (push '("[#B]" . "⁑" ) prettify-symbols-alist)
  (push '("[#C]" . "⁕" ) prettify-symbols-alist)
  (prettify-symbols-mode)))
#+end_src

*** Fancy priorities
#+begin_src emacs-lisp :tangle config.el
(after! org-fancy-priorities
  (setq
   org-fancy-priorities-list '((65 . "⁂")
                               (66 . "⁑")
                               (67 . "⁕"))))
#+end_src

*** Move tags to the far right
#+begin_src emacs-lisp :tangle config.el
(setq org-tags-column -77)
#+end_src

*** Enable word-wrap
#+begin_src emacs-lisp :tangle config.el
(add-hook 'org-mode-hook #'+word-wrap-mode)
#+end_src

*** Visual line mode
#+begin_src emacs-lisp :tangle config.el
(add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

*** Emphasis markers
#+begin_src emacs-lisp :tangle config.el
(setq org-hide-emphasis-markers t)
#+end_src

** Org autolist
#+begin_src emacs-lisp :tangle packages.el
(package! org-autolist)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(add-hook 'org-mode-hook (lambda () (org-autolist-mode)))
#+end_src

* Treemacs

** Treemacs git mode
#+begin_src emacs-lisp :tangle config.el
(setq +treemacs-git-mode 'deferred)
#+end_src

** Treemacs modes
#+begin_src emacs-lisp :tangle config.el
(setq treemacs-follow-mode t)
#+end_src

** Pull all the icons for treemacs
#+begin_src emacs-lisp :tangle packages.el
(package! treemacs-all-the-icons)
#+end_src

** Set treemacs themes
#+begin_src emacs-lisp :tangle config.el
(require 'treemacs-all-the-icons)
(treemacs-load-theme "all-the-icons")

(setq  doom-themes-treemacs-theme "doom-colors")
#+end_src

* Company

** Disable autocommit of completion
#+begin_src emacs-lisp :tangle config.el
(setq company-auto-complete nil)
#+end_src

** Tooltips
#+begin_src emacs-lisp :tangle config.el
(setq company-tooltip-align-annotations t
      company-tooltip-minimum (- scroll-margin 1)
      company-tooltip-flip-when-above t)
#+end_src

** Matching
#+begin_src emacs-lisp :tangle config.el
(setq company-minimum-prefix-length 2
      company-require-match nil)
#+end_src

** Delay
#+begin_src emacs-lisp :tangle config.el
(setq company-idle-delay 0)
#+end_src

* Vterm
#+begin_src emacs-lisp :tangle config.el
(setq vterm-always-compile-module t)
#+end_src

* LSP
#+begin_src emacs-lisp :tangle config.el
(require 'lsp)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.go\\'")

  )
#+end_src

#+begin_src emacs-lisp :tangle config.el
(setq lsp-disabled-clients '(tfls tfmls))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(after! lsp-ui
  (setq lsp-ui-sideline-show-diagnostics t
        lsp-headerline-breadcrumb-enable t
        lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-show-hover t
        lsp-ui-doc-enable t
        lsp-ui-doc-position "Bottom"
        lsp-ui-doc-delay 1
        lsp-ui-doc-show-with-cursor t))
#+end_src

*** nix
#+begin_src emacs-lisp :tangle config.el
(add-hook 'nix-mode-hook #'lsp!)
#+end_src

*** Terraform
#+begin_src emacs-lisp :tangle config.el
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-language-id-configuration
    '(terraform-mode . "terraform")))

(lsp-register-client
 (make-lsp-client :new-connection (lsp-stdio-connection '("terraform-ls" "serve"))
                  :activation-fn (lsp-activate-on "terraform")
                  :priority 0
                  :server-id 'terraform-ls))

(add-hook 'terraform-mode-hook #'lsp-deferred)
#+end_src

* Additional tools

** Flyspell
#+begin_src emacs-lisp :tangle config.el
(after! flyspell
  (setq flyspell-lazy-idle-seconds 2))
#+end_src

** Flymake
#+begin_src emacs-lisp :tangle config.el
(add-hook! prog-mode #'flymake-mode)

(after! lsp-mode
  (setq lsp-diagnostics-provider :flymake))
#+end_src

** Cheat.sh
#+begin_src emacs-lisp :tangle packages.el
(package! cheat-sh)
#+end_src

** Inheritenv
#+begin_src emacs-lisp :tangle packages.el
(package! inheritenv)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'inheritenv)
(inheritenv-add-advice #'with-temp-buffer)
#+end_src
