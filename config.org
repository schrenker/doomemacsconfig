#+TITLE: Literate doom Emacs config

* Table of Contents :TOC:
- [[#headers][Headers]]
- [[#doom][Doom]]
  - [[#natively-compile-on-doom-sync][Natively compile on doom sync]]
- [[#emacs][Emacs]]
  - [[#personal-information][Personal information]]
  - [[#keybinds][Keybinds]]
  - [[#workspaces][Workspaces]]
  - [[#disable-menu-and-tool-bar][Disable menu and tool bar]]
  - [[#show-current-function-in-modeline][Show current function in modeline]]
  - [[#unpin-doom-themes][Unpin doom themes]]
  - [[#default-fallback-theme][Default fallback theme]]
  - [[#daynight-mode-switching-function-based-on-emacs-plus-patch][Day/Night mode switching function (based on emacs-plus patch)]]
  - [[#disable-solaire-mode-in-terminal][Disable solaire-mode in terminal]]
  - [[#set-font][Set font]]
  - [[#set-dashboard-image][Set dashboard image]]
  - [[#start-emacs-maximized][Start emacs maximized]]
  - [[#truncate-doom-dashboard][Truncate doom dashboard]]
  - [[#set-frame-title-and-icon][Set frame title and icon]]
  - [[#ace-window][Ace window]]
  - [[#modeline][Modeline]]
  - [[#always-make-windows-proportional-after-splitting][Always make windows proportional after splitting]]
  - [[#stretch-cursor-to-glyph-size][Stretch cursor to glyph size]]
  - [[#truncate-ellipsis][Truncate ellipsis]]
  - [[#uniquify][Uniquify]]
  - [[#emacsclient][Emacsclient]]
  - [[#global-subword-mode][Global subword mode]]
  - [[#delete-files-to-trash][Delete files to trash]]
- [[#centaur-tabs][Centaur Tabs]]
  - [[#group-tabs-by-projectile-project][Group tabs by projectile project]]
  - [[#show-tab-index-and-count][Show tab index and count]]
  - [[#disable-tabs-for-specific-buffers][Disable tabs for specific buffers]]
  - [[#gray-out-non-focused-buffer-icons][Gray out non focused buffer icons]]
- [[#editor][Editor]]
  - [[#enable-autosave][Enable autosave]]
  - [[#auto-backup-files][Auto backup files]]
  - [[#set-default-tab-width][Set default tab-width]]
  - [[#relative-numbers][Relative numbers]]
  - [[#set-scroll-margin][Set scroll margin]]
  - [[#disable-final-newline-in-files][Disable final newline in files]]
- [[#ranger][Ranger]]
- [[#evil][Evil]]
  - [[#set-up-evil-packages][Set up evil packages]]
  - [[#fine-undo][Fine Undo]]
  - [[#split-windows-so-that-rightdown-is-focused-after-the-split][Split windows so that right/down is focused after the split]]
  - [[#show-buffer-prompt-upon-window-split][Show buffer prompt upon window split]]
  - [[#line-up-y-behavior-to-other-operators][Line up Y behavior to other operators]]
  - [[#dont-continue-comments-on-oo-creating-empty-lines][Don't continue comments on o/O, creating empty lines]]
  - [[#changed-text-doesnt-go-into-clipboard][Changed text doesn't go into clipboard]]
  - [[#visual-mode-changes-dont-go-into-clipboard][Visual mode changes don't go into clipboard]]
  - [[#substitute-global-by-default][Substitute global by default]]
  - [[#disable-escape-on-jk][Disable escape on "jk"]]
  - [[#evil-window-map][Evil Window Map]]
  - [[#enable-key-chord-and-make-double-tap--move-cursor-to-the-right-in-insert-mode][Enable key-chord and make double tap ';' move cursor to the right in insert mode]]
  - [[#disable-evil-keybindings-for-git-timemachine][Disable evil keybindings for git-timemachine]]
- [[#eshell][Eshell]]
- [[#magit][Magit]]
  - [[#smerge-repeatedly-thanks-tecosaur][Smerge repeatedly (thanks tecosaur)]]
- [[#org-mode][Org mode]]
  - [[#update-dynamic-blocks-on-save][Update dynamic blocks on save]]
  - [[#format-org-mode-buffer-on-save][Format org mode buffer on save]]
  - [[#org-mode-map][Org-mode-map]]
  - [[#set-visual-line-movement-via-gj-and-gk][Set visual line movement via gj and gk]]
  - [[#set-up-path-for-org-mode][Set up path for org mode]]
  - [[#exclude-certain-tags-from-inheritance][Exclude certain tags from inheritance]]
  - [[#set-up-headline-encryption][Set up headline encryption]]
  - [[#disable-electric-indent][Disable electric indent]]
  - [[#org-kanban][Org kanban]]
  - [[#org-appear][Org appear]]
  - [[#inline-images][Inline images]]
  - [[#log-time-of-done-tasks][Log time of done tasks]]
  - [[#task-status-and-prioritization][Task status and prioritization]]
  - [[#drawer-for-state-changes][Drawer for state changes]]
  - [[#headlines][Headlines]]
  - [[#bullet-points][Bullet points]]
  - [[#demote-bullet-points][Demote bullet points]]
  - [[#fancy-priorities][Fancy priorities]]
  - [[#move-tags-to-the-far-right][Move tags to the far right]]
  - [[#enable-word-wrap][Enable word-wrap]]
  - [[#visual-line-mode][Visual line mode]]
  - [[#emphasis-markers][Emphasis markers]]
  - [[#agenda-holidays][Agenda holidays]]
  - [[#roam][Roam]]
  - [[#record-last-modified-date-in-org-mode][Record last modified date in org-mode]]
  - [[#org-capture-templates][Org capture templates]]
  - [[#org-capture-anywhere-macos][Org capture anywhere MacOS]]
  - [[#org-autolist][Org autolist]]
- [[#treemacs][Treemacs]]
  - [[#treemacs-git-mode][Treemacs git mode]]
  - [[#treemacs-popup-rule][Treemacs popup rule]]
  - [[#treemacs-modes][Treemacs modes]]
  - [[#pull-all-the-icons-for-treemacs][Pull all the icons for treemacs]]
  - [[#set-treemacs-themes][Set treemacs themes]]
- [[#corfu][Corfu]]
  - [[#tng-keymap][TNG keymap]]
  - [[#global-corfu-mode][Global corfu mode]]
  - [[#remove-company-remnants][Remove company remnants]]
  - [[#orderless][Orderless]]
- [[#eat][Eat]]
- [[#flyspell][Flyspell]]
- [[#cheatsh][Cheat.sh]]
- [[#inheritenv][Inheritenv]]
- [[#dired][Dired]]
- [[#x509-mode][x509 mode]]
- [[#confluence][Confluence]]
- [[#kubernetes][Kubernetes]]
  - [[#kele][Kele]]
- [[#yasnippets][Yasnippets]]
- [[#open-very-large-files-effortlessly-thanks-tecosaur][Open very large files effortlessly (thanks Tecosaur)]]
- [[#additional-config][Additional config]]
  - [[#load-wsl-config-override][Load WSL config override]]
  - [[#additional-tweaks-to-personal-info-and-org-mode-for-my-work][Additional tweaks to personal info and org mode for my work]]

* Headers
#+begin_src elisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src elisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

#+BEGIN_SRC elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+END_SRC

* Doom
#+begin_src elisp :tangle init.el
(doom! :completion
       (vertico +icons)

       :local
       (corfu +icons +tng)
       org-format

       :ui
       doom                                     ; what makes DOOM look the way it does
       doom-dashboard                           ; a nifty splash screen for Emacs
       doom-quit                                ; DOOM quit-message prompts when you quit Emacs
       (emoji +ascii +github +unicode)
       hl-todo
       indent-guides                            ; highlighted indent columns
       modeline                                 ; snazzy, Atom-inspired modeline, plus API
       nav-flash
       ophints                                  ; highlight the region an operation acts on
       (popup +defaults +all)                   ; tame sudden yet inevitable temporary windows
       tabs
       treemacs                                 ; a project drawer, like neotree but cooler
       unicode                                  ; extended unicode support for various languages
       (window-select +numbers)                 ; visually switch windows
       workspaces                               ; tab emulation, persistence & separate workspaces
       (vc-gutter +diff-hl +pretty)             ; vcs diff in the fringe
       vi-tilde-fringe                          ; fringe tildes to mark beyond EOB
       zen

       :editor
       (evil +everywhere)                       ; come to the dark side, we have cookies
       file-templates                           ; auto-snippets for empty files
       fold                                     ; (nigh) universal code folding
       (format +onsave)                         ; automated prettiness
       rotate-text
       snippets                                 ; my elves. They type so I don't have to
       word-wrap

       :emacs
       (dired +icons +ranger)                   ; making dired pretty [functional] directory editor
       electric                                 ; smarter, keyword-based electric-indent
       (ibuffer +icons)                         ; interactive buffer management
       (undo +tree)                             ; persistent, smarter undo for your inevitable mistakes
       vc                                       ; version-control and Emacs, sitting in a tree

       :term
       eshell

       :checkers
       (spell +flyspell +everywhere)
       (syntax +childframe)                     ; tasing you for every semicolon you forget

       :tools
       ansible
       direnv
       (docker +lsp)
       editorconfig
       (eval +overlay)                          ; run code, run (also, repls)
       lookup                                   ; navigate your code and its documentation
       (lsp +eglot)                             ; M-x vscode
       (magit +forge)                           ; a git porcelain for Emacs
       pdf                                      ; pdf enhancements
       terraform                                ; infrastructure as code
       tree-sitter
       upload                                   ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)                       ; improve compatibility with macOS
       (tty +osc)                               ; improve the terminal Emacs experience

       :lang
       data
       emacs-lisp                               ; drown in parentheses
       graphql
       (go +lsp)
       (javascript +lsp +tree-sitter)
       (json +lsp +tree-sitter)                 ; At least it ain't XML
       (python +lsp +pyright +pyenv)            ; beautiful is better than ugly
       (nix +lsp)
       (org +pretty +present +dragndrop +roam2) ; organize your plain life in plain text
       rest
       (scheme +guile)
       (sh +lsp +fish +powershell)              ; she sells {ba,z,fi}sh shells on the C xor
       (web +lsp +tree-sitter)
       (yaml +lsp)                              ; JSON, but readable

       :app
       calendar

       :config
       (default +bindings +smartparens)
       literate)
#+end_src

** Natively compile on doom sync
#+begin_src elisp :tangle init.el
(setq native-comp-deferred-compilation nil)
(after! (doom-packages straight)
  (setq straight--native-comp-available t))
#+end_src

* Emacs

** Personal information
#+begin_src elisp :tangle config.el
(setq  user-full-name "Sebastian Zawadzki"
       user-mail-address (rot13 "fronfgvna@mnjnqmxv.grpu"))
#+end_src

** Keybinds

*** Mac specific keybindings
#+begin_src elisp :tangle config.el
(cond (IS-MAC
       (setq mac-command-modifier       'meta
             mac-option-modifier        'alt)))
#+end_src

*** Mac style keyboard shortcuts
#+begin_src elisp :tangle config.el
(map! "M-c" #'kill-ring-save)
(map! "M-v" #'yank)
(map! "M-q" #'save-buffers-kill-terminal)
(map! "M-m" #'suspend-frame)
(map! "M-w" #'kill-this-buffer)
#+end_src

*** Remove word backwards
#+begin_src elisp :tangle config.el
(map! "A-<backspace>" #'doom/delete-backward-word)
#+end_src

** Workspaces
#+begin_src elisp :tangle config.el
 (setq +workspaces-on-switch-project-behavior 'non-empty)
#+end_src

** Disable menu and tool bar
#+begin_src elisp :tangle config.el
(add-hook! 'doom-first-buffer-hook
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))
#+end_src

** Show current function in modeline
#+begin_src elisp :tangle config.el
(which-function-mode)
#+end_src

** Unpin doom themes
#+begin_src elisp :tangle packages.el
(unpin! doom-themes)
#+end_src

** Default fallback theme
#+begin_src elisp :tangle config.el
(setq doom-theme 'doom-solarized-light)
#+end_src

** Day/Night mode switching function (based on emacs-plus patch)
#+begin_src elisp :tangle config.el
(defun my/apply-theme (appearance)
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (setq doom-theme 'doom-solarized-light)
            (load-theme 'doom-solarized-light t))
    ('dark (setq doom-theme 'doom-solarized-dark)
           (load-theme 'doom-solarized-dark t)))
  (centaur-tabs-init-tabsets-store)
  (org-roam-ui-sync-theme))

(add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src

** Disable solaire-mode in terminal
#+begin_src elisp :tangle config.el
(unless (display-graphic-p)
  (solaire-global-mode -1))
#+end_src

** Set font
#+begin_src elisp :tangle config.el
(setq doom-font (font-spec :family "JetBrains Mono NL" :size 13)
      doom-big-font (font-spec :family "JetBrains Mono NL" :size 26)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 13)
      doom-unicode-font (font-spec :family "JuliaMono")
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))
#+end_src

*** Treemacs
#+begin_src elisp :tangle config.el
(setq doom-themes-treemacs-enable-variable-pitch nil)
#+end_src

** Set dashboard image
#+begin_src elisp :tangle config.el
(setq fancy-splash-image "~/.config/doom/banner.png")
#+end_src

** Start emacs maximized
#+begin_src elisp :tangle config.el
(setq initial-frame-alist '((fullscreen . maximized)))
#+end_src

** Truncate doom dashboard
#+begin_src elisp :tangle config.el
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)
#+end_src

** Set frame title and icon
#+begin_src elisp :tangle config.el
(setq-default
 frame-title-format '("Doom")
 ns-use-proxy-icon nil)
#+end_src

** Ace window

*** Unpin ace window
#+begin_src elisp :tangle packages.el
(package! ace-window :pin "77115afc1b0b9f633084cf7479c767988106c196")
#+end_src

*** Ignore posframe error
#+begin_src elisp :tangle config.el
(defun fail-silently-advice (func &rest args)
  (ignore-errors
    (apply func args)))

(advice-add 'ace-window-posframe-enable :around #'fail-silently-advice)
#+end_src

*** Make window indicator more visible
#+begin_src elisp :tangle config.el
(require 'posframe)

(custom-set-faces!
  '(aw-leading-char-face
    :foreground "red"
    :weight bold
    :height 2.5))
(after! posframe
(ace-window-posframe-mode 1))
#+end_src

*** Set aw keys to homerow
#+begin_src elisp :tangle config.el
(setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
#+end_src

** Modeline
#+begin_src elisp :tangle config.el
(setq doom-modeline-icon (display-graphic-p)
      doom-modeline-major-mode-icon nil
      doom-modeline-buffer-state-icon t)
#+end_src

** Always make windows proportional after splitting
#+begin_src elisp :tangle config.el
(setq-default window-combination-resize t)
#+end_src

** Stretch cursor to glyph size
#+begin_src elisp :tangle config.el
(setq-default x-stretch-cursor t)
#+end_src

** Truncate ellipsis
#+begin_src elisp :tangle config.el
(setq-default truncate-string-ellipsis "…")
#+end_src

** Uniquify
#+begin_src elisp :tangle config.el
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
(setq uniquify-separator "/")
(setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
(setq uniquify-ignore-buffers-re "^\\*")
(after! persp-mode
  (setq-hook! 'persp-mode-hook uniquify-buffer-name-style 'forward))
#+end_src

** Emacsclient
#+begin_src elisp :tangle config.el
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

** Global subword mode
#+begin_src elisp :tangle config.el
(global-subword-mode 1)
#+end_src

** Delete files to trash
#+begin_src elisp :tangle config.el
(setq-default delete-by-moving-to-trash t)
#+end_src

* Centaur Tabs

** Group tabs by projectile project
#+begin_src elisp :tangle config.el
(require 'centaur-tabs)
(centaur-tabs-group-by-projectile-project)
#+end_src

** Show tab index and count
#+begin_src elisp :tangle config.el
(setq centaur-tabs-show-count t)
#+end_src

** Disable tabs for specific buffers
#+begin_src elisp :tangle config.el
(add-hook! '(ibuffer-mode-hook
             org-agenda-mode-hook
             dired-mode-hook
             ranger-mode-hook) #'centaur-tabs-local-mode)
#+end_src

** Gray out non focused buffer icons
#+begin_src elisp :tangle config.el
(setq centaur-tabs-gray-out-icons 'buffer)
#+end_src

* Editor

** Enable autosave
#+begin_src elisp :tangle config.el
(setq auto-save-default t)
#+end_src

** Auto backup files
#+begin_src elisp :tangle config.el
(setq make-backup-files t)
#+end_src

** Set default tab-width
#+begin_src elisp :tangle config.el
(setq-default tab-width 4)
#+end_src

** Relative numbers
#+begin_src elisp :tangle config.el
(setq display-line-numbers-type 'visual)
#+end_src

** Set scroll margin
#+begin_src elisp :tangle config.el
(setq scroll-margin 5)
#+end_src

** Disable final newline in files
#+begin_src elisp :tangle config.el
(setq require-final-newline nil)
#+end_src

* Ranger
#+begin_src elisp :tangle config.el
(ranger-override-dired-mode t)
(setq ranger-show-hidden t
      ranger-hide-cursor t
      ranger-excluded-extensions '("mkv" "iso" "mp4" "bin" "exe" "msi"))
#+end_src

* Evil

** Set up evil packages
#+begin_src elisp :tangle packages.el
(package! evil-commentary)
(package! evil-snipe :disable t)
#+end_src

** Fine Undo
#+begin_src elisp :tangle config.el
(setq evil-want-fine-undo t)
#+end_src

** Split windows so that right/down is focused after the split
#+begin_src elisp :tangle config.el
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

** Show buffer prompt upon window split
#+begin_src elisp :tangle config.el
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-project-buffer))
#+end_src

** Line up Y behavior to other operators
#+begin_src elisp :tangle config.el
(setq evil-want-Y-yank-to-eol t)
#+end_src

** Don't continue comments on o/O, creating empty lines
#+begin_src elisp :tangle config.el
(setq +evil-want-o/O-to-continue-comments nil)
#+end_src

** Changed text doesn't go into clipboard
#+begin_src elisp :tangle config.el
(defun schrenker/evil-change (orig-fn beg end &optional type _ &rest args)
    (apply orig-fn beg end type ?_ args))
(advice-add 'evil-change :around 'schrenker/evil-change)
#+end_src

** Visual mode changes don't go into clipboard
#+begin_src elisp :tangle config.el
(setq evil-kill-on-visual-paste nil)
#+end_src

** Substitute global by default
#+begin_src elisp :tangle config.el
(setq evil-ex-substitute-global t)
#+end_src

** Disable escape on "jk"
#+begin_src elisp :tangle config.el
(setq evil-escape-key-sequence nil)
#+end_src

** Evil Window Map
#+begin_src elisp :tangle config.el
(map! :map evil-window-map
      :g "w" #'ace-window
      :g "p" #'treemacs-select-window)
#+end_src

** Enable key-chord and make double tap ';' move cursor to the right in insert mode
#+begin_src elisp :tangle packages.el
(package! key-chord)
#+end_src

#+begin_src elisp :tangle config.el
(require 'key-chord)

(key-chord-define evil-insert-state-map ";;" 'right-char)
(key-chord-mode 1)
#+end_src

** Disable evil keybindings for git-timemachine
#+begin_src elisp :tangle config.el
(with-eval-after-load 'git-timemachine
  (evil-make-overriding-map git-timemachine-mode-map 'normal)
  (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))
#+end_src

* Eshell
#+begin_src emacs-lisp :tangle config.el
(remove-hook! 'eshell-mode-hook #'hide-mode-line-mode)
(add-hook! 'eshell-mode-hook
  (unless (s-contains? "popup" (buffer-name))
    (rename-buffer (concat "Esh:" (projectile-project-name)) t)))
;;Fix for doom/reload problem
(advice-add 'eshell-did-you-mean-output-filter :around #'fail-silently-advice)
(setq bash-completion-enabled nil)
#+end_src

* Magit

** Smerge repeatedly (thanks tecosaur)
#+begin_src elisp :tangle config.el
(defun smerge-repeatedly ()
  "Perform smerge actions again and again"
  (interactive)
  (smerge-mode 1)
  (smerge-transient))
(after! transient
  (transient-define-prefix smerge-transient ()
    [["Move"
      ("n" "next" (lambda () (interactive) (ignore-errors (smerge-next)) (smerge-repeatedly)))
      ("p" "previous" (lambda () (interactive) (ignore-errors (smerge-prev)) (smerge-repeatedly)))]
     ["Keep"
      ("b" "base" (lambda () (interactive) (ignore-errors (smerge-keep-base)) (smerge-repeatedly)))
      ("u" "upper" (lambda () (interactive) (ignore-errors (smerge-keep-upper)) (smerge-repeatedly)))
      ("l" "lower" (lambda () (interactive) (ignore-errors (smerge-keep-lower)) (smerge-repeatedly)))
      ("a" "all" (lambda () (interactive) (ignore-errors (smerge-keep-all)) (smerge-repeatedly)))
      ("RET" "current" (lambda () (interactive) (ignore-errors (smerge-keep-current)) (smerge-repeatedly)))]
     ["Diff"
      ("<" "upper/base" (lambda () (interactive) (ignore-errors (smerge-diff-base-upper)) (smerge-repeatedly)))
      ("=" "upper/lower" (lambda () (interactive) (ignore-errors (smerge-diff-upper-lower)) (smerge-repeatedly)))
      (">" "base/lower" (lambda () (interactive) (ignore-errors (smerge-diff-base-lower)) (smerge-repeatedly)))
      ("R" "refine" (lambda () (interactive) (ignore-errors (smerge-refine)) (smerge-repeatedly)))
      ("E" "ediff" (lambda () (interactive) (ignore-errors (smerge-ediff)) (smerge-repeatedly)))]
     ["Other"
      ("c" "combine" (lambda () (interactive) (ignore-errors (smerge-combine-with-next)) (smerge-repeatedly)))
      ("r" "resolve" (lambda () (interactive) (ignore-errors (smerge-resolve)) (smerge-repeatedly)))
      ("k" "kill current" (lambda () (interactive) (ignore-errors (smerge-kill-current)) (smerge-repeatedly)))
      ("q" "quit" (lambda () (interactive) (smerge-auto-leave)))]]))
#+end_src

* Org mode
#+begin_src elisp :tangle config.el
(setq org-startup-folded 'nofold)
#+end_src

** Update dynamic blocks on save
#+begin_src elisp :tangle config.el
(after! org
  (add-hook 'before-save-hook
            (lambda ()
              (unless (and (boundp 'org-capture-mode) org-capture-mode)
                (org-update-all-dblocks)))))
#+end_src

** Format org mode buffer on save
#+begin_src elisp :tangle config.el
(add-hook! 'org-mode-hook (org-format-on-save-mode 1))
#+end_src

** Org-mode-map
#+begin_src elisp :tangle config.el
(map! :map org-mode-map
      :localleader "$" #'org-decrypt-entry
      :localleader "a i" #'org-display-inline-images)
#+end_src

** Set visual line movement via gj and gk
#+begin_src elisp :tangle config.el
(after! org
  (map! :map org-mode-map
        :nv "gj" #'evil-next-visual-line
        :nv "gk" #'evil-previous-visual-line))
#+end_src

** Set up path for org mode
#+begin_src elisp :tangle config.el
(setq org-directory "~/org"
      org-roam-directory org-directory
      org-archive-location "archive/%s_archive::"
      org-default-notes-file (concat org-directory "/20221222131538-personal.org")
      +org-capture-notes-file org-default-notes-file)
#+end_src

** Exclude certain tags from inheritance
#+begin_src elisp :tangle config.el
(setq org-tags-exclude-from-inheritance '("crypt"
                                          "moc"
                                          "inbox"))
#+end_src

** Set up headline encryption
#+begin_src elisp :tangle config.el
(require 'org-crypt)

(setq org-crypt-disable-auto-save t
      org-crypt-key (rot13 "fronfgvna@mnjnqmxv.grpu"))
#+end_src

** Disable electric indent
#+begin_src elisp :tangle config.el
(add-hook! org-mode (electric-indent-local-mode -1))
#+end_src

** Org kanban
#+begin_src elisp :tangle packages.el
(package! org-kanban)
#+end_src

** Org appear
#+begin_src elisp :tangle packages.el
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))
#+end_src

#+begin_src elisp :tangle config.el
(add-hook 'org-mode-hook 'org-appear-mode)
#+end_src

** Inline images
#+begin_src elisp :tangle config.el
(setq org-display-remote-inline-images t
      org-startup-with-inline-images t
      org-image-actual-width nil)
#+end_src

** Log time of done tasks
#+begin_src elisp :tangle config.el
(setq org-log-done 'time)
#+end_src

** Task status and prioritization
#+begin_src elisp :tangle config.el
(after! org
  (setq
   org-crypt-disable-auto-save t
   org-priority-highest '?A
   org-priority-lowest  '?C
   org-priority-default '?C
   org-priority-start-cycle-with-default t
   org-priority-faces '((?A :foreground "#FF6C6B" :weight normal)
                        (?B :foreground "#ECBE7B" :weight normal)
                        (?C :foreground "#51AFEF" :weight normal))
   org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i!)" "BLOCKED(b@/!)" "ONHOLD(o@/!)" "REVIEW(r!)" "|" "DONE(d/@)" "DELEGATED(e@/@)" "CANCELLED(c@/@)"))
   org-todo-keyword-faces
   '(("TODO" :foreground "#8741bb" :weight bold :inverse-video t)
     ("INPROGRESS" :foreground "#98BE65" :weight bold :inverse-video t)
     ("BLOCKED" :foreground "#DA8548" :weight bold :inverse-video t)
     ("ONHOLD" :foreground "#2AA198" :weight bold :inverse-video t)
     ("REVIEW" :foreground "#00BFFF" :weight bold :inverse-video t)
     ("DONE" :foreground "#9FA4BB" :weight bold :inverse-video t )
     ("CANCELLED" :foreground "#574C58" :weight bold :inverse-video t)
     ("DELEGATED"  :foreground "#6c71c4" :weight bold :inverse-video t))))

#+end_src

** Drawer for state changes
#+begin_src elisp :tangle config.el
(setq org-log-into-drawer "LOGBOOK")
#+end_src

** Headlines
#+begin_src elisp :tangle config.el
(setq org-superstar-headline-bullets-list '("⁖"))

(after! org
  (custom-set-faces!
    '(org-level-1 :height 1.04 :inherit outline-1)
    '(org-level-2 :height 1.04 :inherit outline-2)
    '(org-level-3 :height 1.04 :inherit outline-3)
    '(org-level-4 :height 1.04 :inherit outline-4)
    '(org-level-5 :height 1.04 :inherit outline-5)
    '(org-level-6 :height 1.04 :inherit outline-6)
    '(org-level-7 :height 1.04 :inherit outline-7)
    '(org-level-8 :height 1.04 :inherit outline-8)))
#+end_src

** Bullet points
#+begin_src elisp :tangle config.el
(setq org-superstar-prettify-item-bullets nil)

(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◆"))))))
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([+]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◇"))))))
#+end_src

** Demote bullet points
#+begin_src elisp :tangle config.el
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("1." . "a.")))
#+end_src

** Fancy priorities
#+begin_src elisp :tangle config.el
(after! org-fancy-priorities
  (setq
   org-fancy-priorities-list '((65 . "⁂")
                               (66 . "⁑")
                               (67 . "⁕"))))
#+end_src

** Move tags to the far right
#+begin_src elisp :tangle config.el
(after! org
  (setq org-tags-column -77))
#+end_src

** Enable word-wrap
#+begin_src elisp :tangle config.el
(add-hook 'org-mode-hook #'+word-wrap-mode)
#+end_src

** Visual line mode
#+begin_src elisp :tangle config.el
(add-hook 'org-mode-hook #'visual-line-mode)
#+end_src

** Emphasis markers
#+begin_src elisp :tangle config.el
(setq org-hide-emphasis-markers t)
#+end_src

** Agenda holidays
#+begin_src elisp :tangle packages.el
(package! polish-holidays :recipe (:host github :repo "mikolajb/emacs-polish-holidays"))
(package! german-holidays)
#+end_src

#+begin_src elisp :tangle config.el
(require 'polish-holidays)
(require 'german-holidays)

  (use-package! holidays
    :after org-agenda
    :config
    (setq calendar-holidays
          (append '((holiday-fixed 1 1 "New Year's Day")
                    (holiday-fixed 2 14 "Valentine's Day")
                    (holiday-fixed 4 1 "April Fools' Day")
                    (holiday-fixed 10 31 "Halloween")
                    (holiday-easter-etc)
                    (holiday-fixed 12 25 "Christmas")
                    (solar-equinoxes-solstices))
                  ustawowo-wolne-od-pracy
                  czas-letni
                  swieta-panstwowe-pozostałe-święta
                  holiday-german-holidays)))
#+end_src

** Roam

*** Org roam keybinds
#+begin_src elisp :tangle config.el
(map! :map doom-leader-notes-map
      :g "r t" #'org-roam-ui-sync-theme
      :g "r o" #'org-roam-ui-open)
#+end_src

*** Org-roam-ui
#+begin_src elisp :tangle packages.el
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

#+begin_src elisp :tangle config.el
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

*** Default template
#+begin_src elisp :tangle config.el
(setq org-roam-capture-templates '(("d" "default" plain "%?"
                                      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+startup: showeverything\n#+date: %U\n#+modified: \n#+filetags: :inbox:\n\n")
                                      :immediate-finish t)))
#+end_src

** Record last modified date in org-mode
#+begin_src elisp :tangle config.el
(after! org
  (setq time-stamp-active t
        time-stamp-start "#\\+modified: [ \t]*"
        time-stamp-end "$"
        time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
  (add-hook 'before-save-hook 'time-stamp))
#+end_src

** Org capture templates
#+begin_src elisp :tangle config.el
(after! org
  (setq org-capture-templates
        '(
          ("p" "Personal Note" entry (file+headline org-default-notes-file "Notes")
           "** %U\n%i%?" :empty-lines 1)
          ("P" "Personal Task" entry (file+olp org-default-notes-file "Tasks" "Backlog")
           "** TODO %?\n%U" :empty-lines 1)
          )))
#+end_src

** Org capture anywhere MacOS
#+begin_src elisp :tangle packages.el
(package! noflet)
#+end_src

#+begin_src elisp :tangle config.el
(require 'noflet)
(defun schrenker/make-capture-frame ()
  "Create a new frame and run `org-capture'."
  (interactive)
  (make-frame '((name . "capture")
                (top . 300)
                (left . 700)
                (width . 80)
                (height . 25)))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
          (org-capture)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame."
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defadvice org-capture-destroy
    (after delete-capture-frame activate)
  "Advise capture-destroy to close the frame."
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))
#+end_src

** Org autolist
#+begin_src elisp :tangle packages.el
(package! org-autolist)
#+end_src

#+begin_src elisp :tangle config.el
(add-hook 'org-mode-hook (lambda () (org-autolist-mode)))
#+end_src

* Treemacs

** Treemacs git mode
#+begin_src elisp :tangle config.el
(setq +treemacs-git-mode 'deferred)
#+end_src

** Treemacs popup rule
#+begin_src elisp :tangle config.el
(set-popup-rule! "^ \\*Treemacs-Scoped-Buffer-Perspective [^*]*\\*" :ignore t)
#+end_src

** Treemacs modes
#+begin_src elisp :tangle config.el
(setq treemacs-follow-mode t)
#+end_src

** Pull all the icons for treemacs
#+begin_src elisp :tangle packages.el
(package! treemacs-all-the-icons)
#+end_src

** Set treemacs themes
#+begin_src elisp :tangle config.el
(require 'treemacs-all-the-icons)
(treemacs-load-theme "all-the-icons")

(setq doom-themes-treemacs-theme "doom-colors")
#+end_src

* Corfu
#+begin_src elisp :tangle config.el
(setq corfu-preview-current 'insert
      corfu-preselect 'prompt ;; Disable candidate preselection
      corfu-on-exact-match nil
      corfu-excluded-modes
      '(erc-mode
        circe-mode
        help-mode
        gud-mode))
#+end_src

** TNG keymap
#+begin_src elisp :tangle config.el
    (map! ;;:desc "complete" "TAB" #'completion-at-point
     :map corfu-map
     :desc "next" "TAB" #'corfu-next
     :desc "next" "<tab>" #'corfu-next
     :desc "next" [tab] #'corfu-next
     :desc "previous" "S-TAB" #'corfu-previous
     :desc "previous" "<backtab>"  #'corfu-previous
     :desc "previous" [backtab] #'corfu-previous)
#+end_src

** Global corfu mode
#+begin_src elisp :tangle config.el
(global-corfu-mode)
#+end_src

** Remove company remnants
#+begin_src elisp :tangle config.el
(setq +lsp-company-backends nil
      +vertico-company-completion-styles nil)
#+end_src

** Orderless
#+begin_src elisp :tangle config.el
(after! corfu
  (require 'orderless)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles basic partial-completion)))
        orderless-matching-styles '(orderless-literal
                                    orderless-regexp
                                    orderless-prefixes
                                    orderless-initialism)))
#+end_src

* Eat
#+begin_src emacs-lisp :tangle packages.el
(package! eat :recipe (:host codeberg
                       :repo "akib/emacs-eat"
                       :files ("*.el" ("term" "term/*.el") "*.texi"
                               "*.ti" ("terminfo/e" "terminfo/e/*")
                               ("terminfo/65" "terminfo/65/*")
                               ("integration" "integration/*")
                               (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq eat-term-name "xterm-256color")
;; For `eat-eshell-mode'.
(add-hook 'eshell-load-hook #'eat-eshell-mode)
#+end_src

* Flyspell
#+begin_src elisp :tangle config.el
(after! flyspell
  (setq flyspell-lazy-idle-seconds 2))
#+end_src

* Cheat.sh
#+begin_src elisp :tangle packages.el
(package! cheat-sh)
#+end_src

* Inheritenv
#+begin_src elisp :tangle packages.el
(package! inheritenv)
#+end_src

#+begin_src elisp :tangle config.el
(require 'inheritenv)
(inheritenv-add-advice #'with-temp-buffer)
#+end_src

* Dired
#+begin_src elisp :tangle config.el
(map! :map dired-mode-map
      :n "h" #'dired-up-directory
      :n "l" #'dired-find-alternate-file)
#+end_src

* x509 mode
#+begin_src elisp :tangle packages.el
(package! x509-mode)
#+end_src

#+begin_src elisp :tangle config.el
(setq x509-openssl-cmd "/opt/homebrew/Cellar/openssl@3/3.0.5/bin/openssl" )
#+end_src

* Confluence
#+begin_src elisp :tangle packages.el
(package! ox-confluence :recipe (:host github :repo "nan0scho1ar/ox-confluence-modern" :files ("*.el")))
#+end_src

* Kubernetes

** Kele
#+begin_src elisp :tangle packages.el
(package! kele)
#+end_src

* Yasnippets
- disable globally, enable locally
#+begin_src elisp :tangle config.el
(yas-global-mode -1)
(yas-reload-all)
(add-hook! 'org-mode-hook (yas-minor-mode))
#+end_src

# * Prism
# #+begin_src elisp :tangle packages.el
# (package! prism)
# #+end_src

# #+begin_src elisp :tangle config.el
# (fset 'rainbow-delimiters-mode #'prism-mode)

# (defun schrenker/prism-set-colors ()
#     (prism-set-colors
#       :desaturations '(0) ; do not change---may lower the contrast ratio
#       :lightens '(0)      ; same
#       :colors (list
#                (doom-color 'blue)
#                (doom-color 'violet)
#                (doom-color 'yellow)
#                (doom-color 'cyan)
#                (doom-color 'green)))
#     (message "Prism colors set."))

# (use-package! prism
#   :commands prism-mode
#   :init
#   (add-hook! '(json-mode-hook prog-mode-hook)
#     (unless (derived-mode-p 'sh-mode 'python-mode)
#       (prism-mode 1)))

#   ;; (add-hook! '(yaml-mode-hook sh-mode-hook python-mode-hook fish-mode-hook)
#   ;;   (prism-whitespace-mode 1))



#   :config
#   (after! doom-themes
#     (setq prism-comments nil)
#      ;; prism-num-faces 5
#      ;; prism-whitespace-mode-indents '((python-mode . python-indent-offset)
#      ;;                                 (haskell-mode . haskell-indentation-left-offset)
#      ;;                                 (yaml-mode . yaml-indent)
#      ;;                                 (sh-mode . sh-basic-offset)
#      ;;                                 (t . 4)))
#     (schrenker/prism-set-colors)
#     (add-hook! '(prog-mode-hook doom-load-theme-hook ns-system-appearance-change-functions) (schrenker/prism-set-colors))))

# #+end_src

* Open very large files effortlessly (thanks Tecosaur)
#+begin_src elisp :tangle packages.el
(package! vlf :recipe (:host github :repo "emacs-straight/vlf" :files ("*.el")) :pin "cacdb359f8c37c6e7e4c7937462b632d22462130")
#+end_src

#+begin_src elisp :tangle config.el
(use-package! vlf-setup
  :defer-incrementally vlf-tune vlf-base vlf-write
  vlf-search vlf-occur vlf-follow vlf-ediff vlf
  :commands vlf vlf-mode
  :init
  (defadvice! +files--ask-about-large-file-vlf (size op-type filename offer-raw)
  "Like `files--ask-user-about-large-file', but with support for `vlf'."
  :override #'files--ask-user-about-large-file
  (if (eq vlf-application 'dont-ask)
      (progn (vlf filename) (error ""))
    (let ((prompt (format "File %s is large (%s), really %s?"
                          (file-name-nondirectory filename)
                          (funcall byte-count-to-string-function size) op-type)))
      (if (not offer-raw)
          (if (y-or-n-p prompt) nil 'abort)
        (let ((choice
               (car
                (read-multiple-choice
                 prompt '((?y "yes")
                          (?n "no")
                          (?l "literally")
                          (?v "vlf"))
                 (files--ask-user-about-large-file-help-text
                  op-type (funcall byte-count-to-string-function size))))))
          (cond ((eq choice ?y) nil)
                ((eq choice ?l) 'raw)
                ((eq choice ?v)
                 (vlf filename)
                 (error ""))
                (t 'abort)))))))
  :config
  (advice-remove 'abort-if-file-too-large #'ad-Advice-abort-if-file-too-large)
  (defvar-local +vlf-cumulative-linenum '((0 . 0))
  "An alist keeping track of the cumulative line number.")

(defun +vlf-update-linum ()
  "Update the line number offset."
  (let ((linenum-offset (alist-get vlf-start-pos +vlf-cumulative-linenum)))
    (setq display-line-numbers-offset (or linenum-offset 0))
    (when (and linenum-offset (not (assq vlf-end-pos +vlf-cumulative-linenum)))
      (push (cons vlf-end-pos (+ linenum-offset
                                 (count-lines (point-min) (point-max))))
            +vlf-cumulative-linenum))))

(add-hook 'vlf-after-chunk-update-hook #'+vlf-update-linum)

;; Since this only works with absolute line numbers, let's make sure we use them.
(add-hook! 'vlf-mode-hook (setq-local display-line-numbers t))

(defun +vlf-next-chunk-or-start ()
  (if (= vlf-file-size vlf-end-pos)
      (vlf-jump-to-chunk 1)
    (vlf-next-batch 1))
  (goto-char (point-min)))

(defun +vlf-last-chunk-or-end ()
  (if (= 0 vlf-start-pos)
      (vlf-end-of-file)
    (vlf-prev-batch 1))
  (goto-char (point-max)))

(defun +vlf-isearch-wrap ()
  (if isearch-forward
      (+vlf-next-chunk-or-start)
    (+vlf-last-chunk-or-end)))

(add-hook! 'vlf-mode-hook (setq-local isearch-wrap-function #'+vlf-isearch-wrap)))
#+end_src

* Additional config

** Load WSL config override
#+begin_src elisp :tangle config.el
(unless IS-MAC
  ;;Start emacs non-maximized
  (setq initial-frame-alist '((top . 1) (left . 1) (width . 120) (height . 40)))
  ;;Unset problematic keybinds
  (map! "M-m" nil))
#+end_src

** Additional tweaks to personal info and org mode for my work
#+begin_src elisp :tangle config.el
(unless IS-MAC
  (load "~/.config/doom/secret/work.el" t t))
#+end_src
